import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup, LabeledPrice
)

API_TOKEN      = os.getenv("BOT_TOKEN")
ADMIN_ID       = int(os.getenv("ADMIN_ID"))
CHECK_INTERVAL = 5        
PRICE      = 500    
PROVIDER_STAR  = "STARS"  

bot = Bot(API_TOKEN)
dp  = Dispatcher()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(Command("start"))
async def start(m: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ 15 ‚≠ê", callback_data="buy15")],
        [InlineKeyboardButton(text=f"üí∏ –î–æ–Ω–∞—Ç {PRICE} ‚≠ê",               callback_data="donate15")],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞",              callback_data="bal")]
    ])
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ 15 ‚≠ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(F.data == "buy15")
async def buy15(c: CallbackQuery):
    if c.from_user.id != ADMIN_ID:
        await c.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.", show_alert=True)
        return

    gifts = await bot.get_available_gifts()
    gift15 = next((g for g in gifts.gifts if g.star_count == 15), None)

    if not gift15:
        await c.message.answer("üò¢ –°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–∞ –∑–∞ 15 –∑–≤—ë–∑–¥.")
        print("INFO  |  –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–∞ –∑–∞ 15 XTR")
    else:
        try:
            await bot.send_gift(user_id=ADMIN_ID, gift_id=gift15.id)
            await c.message.answer("üéâ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            print("OK    |  15-–∑–≤—ë–∑–¥–æ—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")
        except Exception as e:
            await c.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∞—Ä–∏—Ç—å: {e}")
            print(f"ERR   |  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∞—Ä–∏—Ç—å 15 ‚≠ê: {e}")
    await c.answer()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¥–æ–Ω–∞—Ç 15 ‚≠ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(F.data == "donate15")
async def donate15(c: CallbackQuery):
    prices = [LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ 15 ‚≠ê", amount=PRICE)]
    await bot.send_invoice(
        chat_id=c.from_user.id,
        title="–î–æ–Ω–∞—Ç 15 –∑–≤—ë–∑–¥",
        description="–≠—Ç–∏ –∑–≤—ë–∑–¥—ã –ø–æ–º–æ–≥—É—Ç –±–æ—Ç—É –≤—ã–∫—É–ø–∞—Ç—å —Ä–µ–¥–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏.",
        payload="donate15",
        provider_token=PROVIDER_STAR,
        currency="XTR",
        prices=prices
    )
    print(f"INFO  |  Invoice 15 ‚≠ê ‚Üí user {c.from_user.id}")
    await c.answer()

@dp.pre_checkout_query()
async def pre_checkout(q):           # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ª—é–±—É—é –æ–ø–ª–∞—Ç—É
    await bot.answer_pre_checkout_query(q.id, ok=True)

@dp.message(F.successful_payment)
async def thanks(m: Message):
    amount = m.successful_payment.total_amount  # —É–∂–µ 15, –±–µ–∑ /100
    await m.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç –≤ {amount} XTR!")
    print(f"OK    |  –ü–æ–ª—É—á–µ–Ω –¥–æ–Ω–∞—Ç {amount} XTR –æ—Ç {m.from_user.id}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–ª–∞–Ω—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(F.data == "bal")
async def bal(c: CallbackQuery):
    bal = await bot.get_my_star_balance()
    await c.message.answer(f"üí´ –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞: {bal.amount} XTR")
    await c.answer()
    print(f"INFO  |  –ë–∞–ª–∞–Ω—Å –∑–∞–ø—Ä–æ—à–µ–Ω: {bal.amount} XTR")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∞–≤—Ç–æ-–º–æ–Ω–∏—Ç–æ—Ä —Ä–µ–¥–∫–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def monitor_gifts():
    depleted: set[str] = set()                 # —É–∂–µ –≤—ã–∫—É–ø–ª–µ–Ω–Ω—ã–µ ¬´–≤ –Ω–æ–ª—å¬ª

    while True:
        try:
            # ‚îÄ 1. —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ ‚îÄ
            gifts_resp = await bot.get_available_gifts()
            balance    = (await bot.get_my_star_balance()).amount  # —Ü–µ–ª—ã–µ XTR

            rare = [
                g for g in gifts_resp.gifts
                if g.total_count is not None
                   and g.remaining_count > 0
                   and g.id not in depleted
            ]
            if not rare:
                print("INFO | —Ä–µ–¥–∫–∏—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–µ—Ç ‚Äì –∂–¥—É‚Ä¶")
                await asyncio.sleep(CHECK_INTERVAL)
                continue

            rare.sort(key=lambda g: g.star_count, reverse=True)
            print(f"INFO | —Ä–µ–¥–∫–∏–µ {[g.star_count for g in rare]}, –±–∞–ª–∞–Ω—Å {balance}")

            # ‚îÄ 2. –∏–¥—ë–º –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º –æ—Ç –¥–æ—Ä–æ–≥–∏—Ö –∫ –¥–µ—à—ë–≤—ã–º ‚îÄ
            for gift in rare:
                price = gift.star_count
                if balance < price:
                    print(f"SKIP | {gift.id}: —Ü–µ–Ω–∞ {price} ‚≠ê, –±–∞–ª–∞–Ω—Å {balance}")
                    continue    # –≤–æ–∑–º–æ–∂–Ω–æ, —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –±–æ–ª–µ–µ –¥–µ—à—ë–≤—ã–π

                while balance >= price:
                    # 2–∞. —É—Ç–æ—á–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
                    fresh = await bot.get_available_gifts()
                    fresh_gift = next((g for g in fresh.gifts if g.id == gift.id), None)
                    if not fresh_gift or fresh_gift.remaining_count == 0:
                        print(f"DONE | {gift.id} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è (–∫—Ç–æ-—Ç–æ –≤—ã–∫—É–ø–∏–ª)")
                        depleted.add(gift.id)
                        break

                    try:
                        await bot.send_gift(user_id=ADMIN_ID, gift_id=gift.id)
                        balance -= price
                        print(f"OK   | {gift.id} ‚àí{price} ‚≠ê, –±–∞–ª–∞–Ω—Å {balance}")
                        await asyncio.sleep(1)      # anti-flood
                    except Exception as e:
                        # –µ—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –≤–Ω–µ–∑–∞–ø–Ω–æ –∫–æ–Ω—á–∏–ª—Å—è ‚Äî –æ—Ç–º–µ—Ç–∏–º –∏ –≤—ã–π–¥–µ–º
                        if "GIFT" in str(e).upper():
                            print(f"GONE | {gift.id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                            depleted.add(gift.id)
                        else:
                            print(f"ERR  | {gift.id}: {e}")
                        break

        except Exception as e:
            print(f"ERR  | monitor_gifts: {e}")

        await asyncio.sleep(CHECK_INTERVAL)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    asyncio.create_task(monitor_gifts())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
   
